on:
  workflow_call:

jobs:
  gcc-build:
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
        build_type: [Release, Debug]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-gcc
          create-symlink: true
          max-size: 1G
      - name: CMake configure
        run: >
          cmake -S . -B build -G Ninja
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=install
        env:
          CC: gcc-14
          CXX: g++-14
      - name: Archive revert list
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.build_type == 'Release' }}
        with:
          name: revert-list
          path: build/revert-list.txt
      - name: Build project
        run: |
          cmake --build build --parallel
        env:
          CC: gcc-14
          CXX: g++-14
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Archive installed package
        uses: ./.github/actions/archive-install
        with:
          path: install
          name: ${{ matrix.build_type == 'Debug' &&
            format('ubuntu-gcc-debug-install-{0}', matrix.os) ||
            format('ubuntu-gcc-install-{0}', matrix.os) }}
  gcc-test:
    needs:
      - gcc-build
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
    steps:
      - uses: actions/checkout@v4
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-gcc-install-${{ matrix.os }}
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf ubuntu-gcc-install-${{ matrix.os }}.tar.gz -C install
      - name: Run func tests (MPI)
        run: scripts/run_tests.py --running-type="processes" --counts 1 2 3 4 --additional-mpi-args="--oversubscribe"
        env:
          PPC_NUM_THREADS: 1
          OMPI_ALLOW_RUN_AS_ROOT: 1
          OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      - name: Run func tests (threads)
        run: scripts/run_tests.py --running-type="threads" --counts 1 2 3 4
        env:
          PPC_NUM_PROC: 1
  gcc-test-extended:
    needs:
      - gcc-test
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
    steps:
      - uses: actions/checkout@v4
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-gcc-install-${{ matrix.os }}
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf ubuntu-gcc-install-${{ matrix.os }}.tar.gz -C install
      - name: Run func tests (threads extended)
        run: scripts/run_tests.py --running-type="threads" --counts 5 7 11 13
        env:
          PPC_NUM_PROC: 1
  clang-build:
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-clang
          create-symlink: true
          max-size: 1G
      - name: CMake configure
        run: >
          cmake -S . -B build -G Ninja
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=install
        env:
          CC: clang-20
          CXX: clang++-20
      - name: Build project
        run: |
          cmake --build build --parallel
        env:
          CC: clang-20
          CXX: clang++-20
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Archive installed package
        uses: ./.github/actions/archive-install
        with:
          path: install
          name: ubuntu-clang-install-${{ matrix.os }}
  clang-test:
    needs:
      - clang-build
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
    steps:
      - uses: actions/checkout@v4
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-clang-install-${{ matrix.os }}
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf ubuntu-clang-install-${{ matrix.os }}.tar.gz -C install
      - name: Run func tests (MPI)
        run: scripts/run_tests.py --running-type="processes" --counts 1 2 3 4 --additional-mpi-args="--oversubscribe"
        env:
          PPC_NUM_THREADS: 1
          OMPI_ALLOW_RUN_AS_ROOT: 1
          OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      - name: Run tests (threads)
        run: scripts/run_tests.py --running-type="threads" --counts 1 2 3 4
        env:
          PPC_NUM_PROC: 1
  clang-test-extended:
    needs:
      - clang-test
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
    steps:
      - uses: actions/checkout@v4
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-clang-install-${{ matrix.os }}
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf ubuntu-clang-install-${{ matrix.os }}.tar.gz -C install
      - name: Run tests (threads extended)
        run: scripts/run_tests.py --running-type="threads" --counts 5 7 11 13
        env:
          PPC_NUM_PROC: 1
  clang-sanitizer-build:
    needs:
      - clang-build
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-clang
          create-symlink: true
          max-size: 1G
      - name: CMake configure
        run: >
          cmake -S . -B build -G Ninja
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=RelWithDebInfo
          -D ENABLE_ADDRESS_SANITIZER=ON -D ENABLE_UB_SANITIZER=ON -D ENABLE_LEAK_SANITIZER=ON
          -D CMAKE_INSTALL_PREFIX=install
        env:
          CC: clang-20
          CXX: clang++-20
      - name: Build project
        run: |
          cmake --build build --parallel
        env:
          CC: clang-20
          CXX: clang++-20
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Archive installed package
        uses: ./.github/actions/archive-install
        with:
          path: install
          name: ubuntu-clang-sanitizer-install-${{ matrix.os }}
  clang-sanitizer-test:
    needs:
      - clang-sanitizer-build
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04"]
    steps:
      - uses: actions/checkout@v4
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-clang-sanitizer-install-${{ matrix.os }}
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf ubuntu-clang-sanitizer-install-${{ matrix.os }}.tar.gz -C install
      - name: Run tests (MPI)
        run: scripts/run_tests.py --running-type="processes" --counts 2 --additional-mpi-args="--oversubscribe"
        env:
          PPC_NUM_THREADS: 2
          PPC_ASAN_RUN: 1
          ASAN_OPTIONS: abort_on_error=1
          UBSAN_OPTIONS: halt_on_error=1
          OMPI_ALLOW_RUN_AS_ROOT: 1
          OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      - name: Run tests (threads)
        run: scripts/run_tests.py --running-type="threads" --counts 1 2 3 4
        env:
          PPC_NUM_PROC: 1
          PPC_ASAN_RUN: 1
          ASAN_OPTIONS: abort_on_error=1
          UBSAN_OPTIONS: halt_on_error=1
  clang-sanitizer-test-extended:
    needs:
      - clang-sanitizer-test
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: ["ubuntu-24.04"]
    steps:
      - uses: actions/checkout@v4
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-clang-sanitizer-install-${{ matrix.os }}
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf ubuntu-clang-sanitizer-install-${{ matrix.os }}.tar.gz -C install
      - name: Run tests (threads extended)
        run: scripts/run_tests.py --running-type="threads" --counts 5 7 11 13
        env:
          PPC_NUM_PROC: 1
          PPC_ASAN_RUN: 1
  clang-build-codecov:
    # needs:
    #   - gcc-test-extended
    #   - clang-test-extended
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/learning-process/ppc-ubuntu:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-clang-coverage
          create-symlink: true
          max-size: 1G
      - name: CMake configure
        run: >
          cmake -S . -B build -G Ninja
          -D CMAKE_C_COMPILER=clang-20 -D CMAKE_CXX_COMPILER=clang++-20
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=RELEASE
          -D CMAKE_VERBOSE_MAKEFILE=ON -D USE_COVERAGE=ON
          -D CMAKE_INSTALL_PREFIX=install
      - name: Build project
        run: |
          cmake --build build --parallel
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Run tests and generate coverage
        run: >
          python3 scripts/run_tests.py --running-type=processes_coverage
          --additional-mpi-args="--oversubscribe" --llvm-version=20
        env:
          LLVM_PROFILE_FILE: build/coverage-%p-%m.profraw
          PPC_NUM_THREADS: 2
          PPC_NUM_PROC: 2
          OMPI_ALLOW_RUN_AS_ROOT: 1
          OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
          PPC_DISABLE_VALGRIND: 1
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.4.3
        with:
          files: build/coverage/coverage.lcov
      - name: Upload coverage report artifact
        id: upload-cov
        uses: actions/upload-artifact@v4
        with:
          name: cov-report
          path: 'build/coverage/html'
      - name: Comment coverage report link
        # TODO: Support PRs from forks and handle cases with insufficient write permissions
        continue-on-error: true
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Coverage report is available for download
            [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
