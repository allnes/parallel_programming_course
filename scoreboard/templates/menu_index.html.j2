<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Scoreboard Menu</title>
    <link rel="stylesheet" type="text/css" href="static/main.css">
    <style>
        nav { margin: 16px 0; }
        nav a { margin-right: 16px; font-weight: bold; }
        #group-links a { margin-right: 10px; padding: 2px 6px; border-radius: 4px; }
        #group-links a.active { background-color: #e6f1ff; border-bottom: 2px solid #2b6cb0; }
    </style>
    <script>
      const groupsThreads = {{ groups_threads | tojson | safe }};
      const groupsProcesses = {{ groups_processes | tojson | safe }};
      function openPage(href, linkEl) {
        document.getElementById('content').src = href;
        if (linkEl) {
          const box = document.getElementById('group-links');
          for (const a of box.querySelectorAll('a')) a.classList.remove('active');
          linkEl.classList.add('active');
        }
      }
      function setGroups(kind) {
        const box = document.getElementById('group-links');
        const groups = kind === 'threads' ? groupsThreads : groupsProcesses;
        let html = '';
        for (const g of groups) {
          html += `<a href="#" class="group-link" onclick="openPage('${g.href}', this); return false;">${g.title}</a> `;
        }
        box.innerHTML = html || '<span style="color:#777">No groups</span>';
      }
      window.addEventListener('DOMContentLoaded', () => setGroups('threads'));
    </script>
</head>
<body>
    <h1>Scoreboard</h1>
    <nav>
        {% for page in pages %}
            <a href="{{ page.href }}" onclick="openPage('{{ page.href }}'); setGroups('{{ 'threads' if 'threads' in page.href else 'processes' }}'); return false;">{{ page.title }}</a>
        {% endfor %}
    </nav>
    <div id="group-links" style="margin-bottom: 8px;"></div>
    <p>
        <b>(V)ariant</b> - Task variant number assigned to the student.<br/>
        <b>(S)olution</b> - The correctness and completeness of the implemented solution.<br/>
        <b>(A)cceleration</b> - The process of speeding up software to improve performance. Speedup = T(seq) / T(parallel)<br/>
        <b>(E)fficiency</b> - Optimizing software speed-up by improving CPU utilization and resource management. Efficiency = Speedup / NumProcs * 100%<br/>
        <b>(D)eadline</b> - The timeliness of the submission in relation to the given deadline.<br/>
        <b>(P)lagiarism</b> - The originality of the work, ensuring no copied content from external sources.
    </p>
    <iframe id="content" src="threads.html" style="width: 100%; height: 85vh; border: 1px solid #ddd;"></iframe>
</body>
</html>
